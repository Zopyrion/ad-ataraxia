const { Remarkable } = require('remarkable');
const meta = require('remarkable-meta');
const fs = require('fs');
const md = new Remarkable();
md.use(meta)

const PATH = "../autogen/metadeta.json";
const metadata = {comment: "THIS IS A FILE AUTOGENERATED BY run.js",
                    all: {},
                    sorted: [],
                    routes: {}
                }

function process_file(file){
    const buffer = fs.readFileSync(file);
    const plaintext = buffer.toString();

    md.render(plaintext);
    const data = md.meta

    const title = data['title']

    metadata['all'][title] = data



}

async function process(){
    const path = "../posts/";
    try {
        const files = await fs.promises.readdir(path);
        for(const file of files) {
            process_file(path + file)
        }
    } catch( e ) {
        console.error("Error: ", e);
    }
}

async function run(){
    await preload()
    await process()
}

async function preload(){
    const res = JSON.parse(fs.readFileSync(PATH, 'utf8'));
    const routes = res['routes']
    metadata['routes'] = routes
}

function cleanup(){

    // Sort all blog entries by date
    let sortedBlogs = null
    const list = []
    for (const [key, value] of Object.entries(metadata['all'])) {
        list.push(value)
    }
    sortedBlogs = list.sort((a, b) => b.date - a.date)
    for (const index in sortedBlogs) {
        metadata['sorted'].push(sortedBlogs[index]['title'])
    }

    // Create url for any new entries
    const routes = metadata['routes']
    const uniques = []
    for (const [, value] of Object.entries(routes)) {
        uniques.push(value)
    }
    for (const title in metadata['all']) {
        if(!(title in routes)){
            routes[title] = createUrl(uniques)
        }
    }

    // Write updated metadata to JSON
    const data = JSON.stringify(metadata,null, 4);
    fs.writeFileSync(PATH, data);
    console.log("~Metadata file has been built")
}

function createUrl(uniques) {
    const min = Math.ceil(10000);
    const max = Math.floor(99999);
    let res = Math.floor(Math.random() * (max - min + 1)) + min;

    while(res in uniques){
        res = Math.floor(Math.random() * (max - min + 1)) + min;
    }
    uniques.push(res)
    return res;
}


run().then(r => cleanup())

